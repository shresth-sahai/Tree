#include <iostream>
#include <vector>
#include <queue>
using namespace std;

struct ListNode
{
    int val;
    ListNode *next;

    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

//Leetcode 876
ListNode *middleNode(ListNode *head)
{
    if (head == nullptr || head->next == nullptr)
        return head;

    ListNode *slow = head;
    ListNode *fast = head;

    while (fast != nullptr && fast->next != nullptr)
    {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

ListNode *middleNode2(ListNode *head)
{
    if (head == nullptr || head->next == nullptr)
        return head;

    ListNode *slow = head;
    ListNode *fast = head;

    while (fast->next != nullptr && fast->next->next != nullptr)
    {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

//Leetcode 206
ListNode *reverseList(ListNode *head)
{
    if (head == nullptr || head->next == nullptr)
        return head;

    ListNode *prev = nullptr;
    ListNode *forw = nullptr;
    ListNode *curr = head;

    while (curr != nullptr)
    {
        forw = curr->next; // backup

        curr->next = prev; // link

        prev = curr; // move
        curr = forw;
    }

    return prev;
}

void reveseData(ListNode *head)
{
    if (head == nullptr || head->next == nullptr)
        return;

    ListNode *mid = middleNode2(head);
    ListNode *tHead = mid->next;
    mid->next = nullptr;

    tHead = reverseList(tHead);
    ListNode *c1 = head;
    ListNode *c2 = tHead;

    while (c1 != nullptr && c2 != nullptr)
    {
        int temp = c1->val;
        c1->val = c2->val;
        c2->val = temp;

        c1 = c1->next;
        c2 = c2->next;
    }

    tHead = reverseList(tHead);
    mid->next = tHead;
}

//Leetcode 234

bool isPalindrome(ListNode *head)
{
    if (head == nullptr || head->next == nullptr)
        return true;

    ListNode *mid = middleNode2(head);
    ListNode *tHead = mid->next;
    mid->next = nullptr;

    tHead = reverseList(tHead);
    ListNode *c1 = head;
    ListNode *c2 = tHead;

    bool res = true;
    while (c1 != nullptr && c2 != nullptr)
    {
        if (c1->val != c2->val)
        {
            res = false;
            break;
        }

        c1 = c1->next;
        c2 = c2->next;
    }

    tHead = reverseList(tHead);
    mid->next = tHead;

    return res;
}

//Leetcode 143
void reorderList(ListNode *head)
{
    if (head == nullptr || head->next == nullptr)
        return;

    ListNode *mid = middleNode2(head);
    ListNode *tHead = mid->next;
    mid->next = nullptr;

    tHead = reverseList(tHead);
    ListNode *c1 = head;
    ListNode *c2 = tHead;

    ListNode *f1 = nullptr;
    ListNode *f2 = nullptr;

    while (c1 != nullptr && c2 != nullptr)
    {
        f1 = c1->next; // backup
        f2 = c2->next;

        c1->next = c2; // link
        c2->next = f1;

        c1 = f1; // move
        c2 = f2;
    }
}

ListNode *th1 = nullptr;
ListNode *tt1 = nullptr;
ListNode *th2 = nullptr;
ListNode *tt2 = nullptr;

void addFirst(ListNode *node)
{
    if (th1 == nullptr)
    {
        th1 = node;
        tt1 = node;
    }
    else
    {
        node->next = th1;
        th1 = node;
    }
}

void addLast(ListNode *node)
{
    if (th2 == nullptr)
    {
        th2 = node;
        tt2 = node;
    }
    else
    {
        tt2->next = node;
        tt2 = node;
    }
}

ListNode *orderList(ListNode *head)
{
    if (head == nullptr || head->next == nullptr)
        return;

    int cnt = 0;
    ListNode *curr = head;
    while (curr != nullptr)
    {
        ListNode *forw = curr->next;
        curr->next = nullptr;

        if (cnt == 0)
            addLast(curr);
        else
            addFirst(curr);

        curr = forw;
        cnt = (cnt + 1) % 2;
    }

    tt2->next = th1;
    return th2;
}

//Leetcode
ListNode *mergeTwoLists(ListNode *l1, ListNode *l2)
{
    if (l1 == nullptr || l2 == nullptr)
        return (l1 == nullptr ? l2 : l1);

    ListNode *dummy = new ListNode(-1);
    ListNode *prev = dummy;

    ListNode *c1 = l1;
    ListNode *c2 = l2;
    while (c1 != nullptr && c2 != nullptr)
    {

        if (c1->val < c2->val)
        {
            prev->next = c1;
            c1 = c1->next;
        }
        else
        {
            prev->next = c2;
            c2 = c2->next;
        }

        prev = prev->next;
    }

    if (c1 != nullptr)
        prev->next = c1;
    else
        prev->next = c2;

    return dummy->next;
}

//Leetcode 148
ListNode *sortList(ListNode *head)
{
    if (head == nullptr || head->next == nullptr)
        return head;

    ListNode *mid = middleNode2(head);
    ListNode *nhead = mid->next;
    mid->next = nullptr;

    return mergeTwoLists(sortList(head), sortList(nhead));
}

//Leetcode 23
ListNode *mergeKLists(vector<ListNode *> &lists, int si, int ei)
{
    if (si == ei)
        return lists[si];

    int mid = (si + ei) / 2;
    return mergeTwoLists(mergeKLists(lists, si, mid), mergeKLists(lists, mid + 1, ei));
}

ListNode *mergeKLists(vector<ListNode *> &lists)
{
    if (lists.size() == 0)
        return nullptr;
    return mergeKLists(lists, 0, lists.size() - 1);
}

class compare
{
public:
    bool operator()(const ListNode *a, const ListNode *b) const
    {
        return a->val > b->val; // this- other , default.
    }
};

ListNode *mergeKLists(vector<ListNode *> &lists)
{
    if (lists.size() == 0)
        return nullptr;

    // PriorityQueue<ListNode> pq = new PriorityQueue<>((a,b)->{
    //     return a.val - b.val;
    // });

    priority_queue<ListNode *, vector<ListNode *>, compare> que;
    for (int i = 0; i < lists.size(); i++)
        que.push(lists[i]);

    ListNode *dummy = new ListNode(-1);
    ListNode *prev = dummy;

    while (que.size() != 1)
    {
        ListNode *node = que.top();
        que.pop();

        ListNode *next = node->next; // backup
        node->next = nullptr;

        prev->next = node; // link
        prev = node;

        if (next != nullptr)
            que.push(next); // move
    }

    prev->next = que.top();
    que.pop();

    return dummy->next;
}

//Leetcode 25
int len(ListNode *head)
{
    int l = 0;
    while (head != nullptr)
    {
        l++;
        head = head->next;
    }
    return l;
}

ListNode *reverseKGroup(ListNode *head, int k)
{
    if (head == nullptr || head->next == nullptr || k <= 1)
        return head;

    int l = len(head);
    if (l < k)
        return head;

    ListNode *curr = head;

    ListNode *oh = nullptr;
    ListNode *ot = nullptr;

    int K = k;
    while (curr != nullptr && l >= k)
    {
        while (K-- > 0)
        {
            ListNode *next = curr->next;
            curr->next = nullptr;

            addFirst(curr);

            curr = next;
        }

        if (oh == nullptr)
        {
            oh = th1;
            ot = tt1;
        }
        else
        {
            ot->next = th1;
            ot = tt1;
        }

        th1 = nullptr;
        tt1 = nullptr;

        l -= k;
        K = k;
    }

    ot->next = curr;
    return oh;
}

//Leetcode 92
ListNode *reverseBetween(ListNode *head, int m, int n)
{
    if (head == nullptr || head->next == nullptr || m == n)
        return head;

    ListNode *curr = head;
    ListNode *prev = nullptr;

    int idx = 1;
    while (curr != nullptr)
    {
        while (idx >= m && idx <= n)
        {
            ListNode *next = curr->next;
            curr->next = nullptr;

            addFirst(curr);
            curr = next;
            idx++;
        }

        if (idx > n)
        {
            if (prev == nullptr)
                head = th1;
            else
                prev->next = th1;

            tt1->next = curr;
            break;
        }

        prev = curr;
        curr = curr->next;
        idx++;
    }

    return head;
}

//Leetcode 141
bool hasCycle(ListNode *head)
{
    if (head == nullptr || head->next == nullptr)
        return false;
    ListNode *slow = head;
    ListNode *fast = head;

    while (fast != nullptr && fast->next != nullptr)
    {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast)
            break;
    }

    return slow == fast;
}

//Leetcode 142
ListNode *detectCycle(ListNode *head)
{

    if (head == nullptr || head->next == nullptr)
        return nullptr;
    ListNode *slow = head;
    ListNode *fast = head;

    while (fast != nullptr && fast->next != nullptr)
    {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast)
            break;
    }

    if (slow != fast)
        return nullptr;

    slow = head;
    while (slow != fast)
    {

        slow = slow->next;
        fast = fast->next;
    }

    return slow;
}

// Insight
ListNode *detectCycle(ListNode *head)
{

    if (head == nullptr || head->next == nullptr)
        return nullptr;
    ListNode *slow = head;
    ListNode *fast = head;

    int m = 0, x = 0, y = 0, z = 0;
    int disOfSlow = 0;
    while (fast != nullptr && fast->next != nullptr)
    {
        slow = slow->next;
        fast = fast->next->next;
        disOfSlow++;
        if (slow == fast)
            break;
    }

    if (slow != fast)
        return nullptr;

    slow = head;
    ListNode *node = fast;
    while (slow != fast)
    {
        if (fast == node)
            m++;
        x++;
        slow = slow->next;
        fast = fast->next;
    }

    y = disOfSlow - x;

    return slow;
}

//Leetcode 160
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB)
{
    if (headA == nullptr || headB == nullptr)
        return nullptr;

    ListNode *prev = headA;
    ListNode *curr = headA;

    while (curr != nullptr)
    {
        prev = curr;
        curr = curr->next;
    }

    prev->next = headB;
    ListNode *ans = detectCycle(headA);
    prev->next = nullptr;

    return ans;
}

ListNode *removeNthFromEnd(ListNode *head, int n)
{
    if (n == 0 || head == nullptr)
        return head;

    ListNode *c1 = head;
    ListNode *c2 = head;

    while (n-- > 0)
        c2 = c2->next;

    if (c2 == nullptr)
        return head->next;

    while (c2->next != nullptr)
    {
        c1 = c1->next;
        c2 = c2->next;
    }

    c1->next = c1->next->next;
    return head;
}

//Leetcode 61
ListNode *rotateRight(ListNode *head, int k)
{
    if (head == nullptr || head->next == nullptr || k == 0)
        return head;

    int len = 0;
    ListNode *curr = head;
    while (curr != nullptr)
    {
        curr = curr->next;
        len++;
    }

    k %= len;
    if (k == 0)
        return head;

    ListNode *c1 = head;
    ListNode *c2 = head;

    while (k-- > 0)
        c2 = c2->next;

    while (c2->next != nullptr)
    {
        c1 = c1->next;
        c2 = c2->next;
    }

    c2->next = head;
    head = c1->next;
    c1->next = nullptr;

    return head;
}

// https://practice.geeksforgeeks.org/problems/segregate-even-and-odd-nodes-in-a-linked-list/0
ListNode *segregateOddEven(ListNode *head)
{
    if (head == nullptr || head->next == nullptr)
        return head;

    ListNode *even = new ListNode(-1);
    ListNode *ep = even;

    ListNode *odd = new ListNode(-1);
    ListNode *op = odd;

    ListNode *curr = head;
    while (curr != nullptr)
    {
        if (curr->val % 2 == 0)
        {
            ep->next = curr;
            ep = ep->next;
        }
        else
        {
            op->next = curr;
            op = op->next;
        }

        curr = curr->next;
    }

    ep->next = odd->next;
    return even->next;
}

ListNode *insert(ListNode *head, int insertVal)
{
    ListNode *node = new ListNode(insertVal);
    if (head == nullptr)
    {
        node->next = node;
        return node;
    }

    ListNode *prev = head;
    ListNode *curr = head->next;

    bool connect = false;
    while (curr != head)
    {

        if (insertVal >= prev->val && insertVal <= curr->val)
            connect = true;
        else if (prev->val > curr->val)
            if (insertVal > prev->val || insertVal < curr->val)
                connect = true;

        if (connect)
            break;

        prev = curr;
        curr = curr->next;
    }

    prev->next = node;
    node->next = curr;

    return head;
}

//Letcode 138
void copyNode(Node *head)
{
    Node *curr = head;
    while (curr != nullptr)
    {
        Node *next = curr->next;
        Node *node = new Node(curr->val);

        curr->next = node;
        node->next = next;

        curr = next;
    }
}

void copyRandomsPointers(Node *head)
{
    Node *curr = head;
    while (curr != nullptr)
    {
        if (curr->random != nullptr)
            curr->next->random = curr->random->next;

        curr = curr->next->next;
    }
}

Node *extractMyLL(Node *head)
{

    Node *dummy = new Node(-1);
    Node *prev = dummy;

    Node *curr = head;
    while (curr != nullptr)
    {

        prev->next = curr->next; // links
        curr->next = curr->next->next;

        prev = prev->next; // move
        curr = curr->next;
    }

    return dummy->next;
}

Node *copyRandomList(Node *head)
{
    if (head == nullptr)
        return head;
    copyNode(head);            // O(n)
    copyRandomsPointers(head); // O(n)
    return extractMyLL(head);  // O(n)
}
public class question{
    public class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;
        TreeNode(int x) { val = x; }
    }


    // Leetcode 236
    public boolean nodeToRootPath(TreeNode node,int data,ArrayList<TreeNode> ans){
        if(node==null) return false;
        
        if(node.val == data){
            ans.add(node);
            return true;
        }
        
        boolean res = nodeToRootPath(node.left,data,ans) || nodeToRootPath(node.right,data,ans);
        if(res){
            ans.add(node);
        }
        
        return res;
    }
    
    
    public TreeNode lowestCommonAncestor(TreeNode node, TreeNode p, TreeNode q) {
            ArrayList<TreeNode> list1 = new ArrayList<>(); 
                nodeToRootPath(node,p.val,list1);
        ArrayList<TreeNode> list2 = new ArrayList<>(); 
            nodeToRootPath(node,q.val,list2);

        int i = list1.size()-1;
        int j = list2.size()-1;

        TreeNode LCA = null;
        while(i>=0 && j>=0){
            if(list1.get(i)==list2.get(j)) LCA = list1.get(i);

            i--;
            j--;
        }
        
        return LCA;
    }

    //Leetcode 112
    public boolean hasPathSum(TreeNode root, int sum) {
     if(root==null) return false;
     if(root.left == null && root.right == null && sum-root.val == 0) return true;
     
     return hasPathSum(root.left,sum-root.val) || hasPathSum(root.right,sum-root.val);
    } 

    //Leetcode 113
    public void pathSum(TreeNode root, int sum,List<List<Integer>> res,List<Integer> ans) {
        if(root==null) return;
        if(root.left == null && root.right == null && sum-root.val == 0){
            List<Integer> base = new ArrayList<>(ans);
            base.add(root.val);
            res.add(base);    
            return;
        }

        ans.add(root.val);
        pathSum(root.left,sum-root.val,res,ans);
        pathSum(root.right,sum-root.val,res,ans);        
        ans.remove(ans.size()-1);
    }

    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new ArrayList<>();
        pathSum(root,sum,res,new ArrayList<>());
        return res;
    }

    // https://practice.geeksforgeeks.org/problems/maximum-path-sum/1
    static int maxLL = -(int)1e8;
    public static int leafToLeaf(Node node){
        if(node==null) return -(int)1e8;
        if(node.left == null && node.right == null ) return node.data;

        int nodeToLeafLeft = leafToLeaf(node.left);
        int nodeToLeafRight = leafToLeaf(node.right);

        if(node.left != null && node.right !=null){
            maxLL = Math.max(maxLL,nodeToLeafLeft + nodeToLeafRight + node.data);
        }
        
        return Math.max(nodeToLeafLeft,nodeToLeafRight) + node.data;
    }

    // Leetcode 119
    public static class pair{
        TreeNode node = null;
        int val = 0;

        pair(TreeNode node,int val){
            this.node = node;
            this.val = val;
        }
    }

    public static List<Integer> leftView(TreeNode node){
        LinkedList<pair> que = new LinkedList<>();
        que.addLast(new pair(node,0));

        int level = 0;
        ArrayList<pair> ans = new ArrayList<>();

        while(que.size()!=0){
            int size = que.size();
            while(size-- > 0){
                pair vtx = que.removeFirst();
                
                if(level == ans.size()) ans.add(vtx);   
                else if(vtx.val < ans.get(level).val) ans.set(level,vtx);

                if(vtx.node.left != null) que.addLast(new pair(vtx.node.left,vtx.val - 1));
                if(vtx.node.right != null) que.addLast(new pair(vtx.node.right,vtx.val + 1));
            
            }
            level++;
        }

        ArrayList<Integer> res = new ArrayList<>();
        for(pair p : ans){
            res.add(p.node.val);
        }

        return res;
    }

    //Leetcode 98
    TreeNode prev = null;
    public boolean isValidBST(TreeNode root) {
        if(root == null) return true;

        if(!isValidBST(root.left)) return false;
        
        if(prev!= null && prev.val > root.val) return false;
        prev = root;

        if(!isValidBST(root.right)) return false;

        return true;
    }

    public class BSTpair{
        boolean isBST = true;
        long min =  (long)1e18;
        long max = -(long)1e18;
    }

    public BSTpair isValidBST_(TreeNode root) {
        if(root == null) return new BSTpair();

        BSTpair left = isValidBST_(root.left);
        BSTpair right = isValidBST_(root.right);

        BSTpair myAns = new BSTpair();
        if(!left.isBST || !right.isBST ||  left.max >= root.val || right.min <= root.val){
            myAns.isBST = false;
            return myAns;
        
        }

        myAns.min = Math.min(left.min,root.val);
        myAns.max = Math.max(right.max,root.val); 

        return myAns;
    }
    
    public boolean isValidBST(TreeNode node){
        return isValidBST_(node).isBST;
    }

    public TreeNode buildTree(int[] preorder,int psi,int pei, int[] inorder,int isi,int iei){
        if(psi > pei) return null;

        TreeNode node = new TreeNode(preorder[psi]);
        int idx = isi;
        while(inorder[idx]!=preorder[psi]){
            idx++;
        }

        int count = idx - isi; // countOfNodesInLeftSubTree.

        node.left = buildTree(preorder,psi+1,psi+count,inorder,isi,idx-1);
        node.right = buildTree(preorder,psi+count+1,pei,inorder,idx+1,iei);

        return node;
    }


    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length==0) return null;
        int n = preorder.length;

        return buildTree(preorder,0,n-1,inorder,0,n-1);
    }

    //106
    public TreeNode buildTree(int[] postorder,int psi,int pei, int[] inorder,int isi,int iei) {
        if(psi > pei) return null;

        TreeNode node = new TreeNode(postorder[pei]);
        int idx = isi;

        while(inorder[idx] != postorder[pei]){
            idx++;
        }

        int count = idx - isi;

        node.left = buildTree(postorder,psi,psi + count - 1, inorder, isi,idx-1);
        node.right = buildTree(postorder,psi + count,pei-1, inorder, idx+1,iei);

        return node;
    }
    
    public TreeNode buildTree(int[] inorder, int[] postorder) {
            if(postorder.length==0) return null;
            int n = postorder.length;
    
            return buildTree(postorder,0,n-1,inorder,0,n-1);
    }

    //Leetcode 889
    public TreeNode buildTree(int[] postorder,int posi,int poei, int[] preorder,int psi,int pei) {
        if(psi > pei) return null;
        if(psi == pei) return new TreeNode(preorder[psi]); // leaf node

        TreeNode node = new TreeNode(preorder[psi]);
        int idx = posi;

        while(postorder[idx] != preorder[psi + 1]){
            idx++;
        }

        int count = idx - posi + 1;

        node.left = buildTree(postorder,posi,posi + count - 1, preorder, psi+1,psi + count);
        node.right = buildTree(postorder,posi + count,poei-1, preorder,psi + count + 1, pei);

        return node;
    }

    public TreeNode constructFromPrePost(int[] pre, int[] post) {
        if(post.length==0) return null;
        int n = post.length;

        return buildTree(post,0,n-1,pre,0,n-1);        
    }

    // 968
    
    
    // -1 i am covered by a camera .
    // 0 i am a camera.
    // 1 means i need a camera.

    int camera=0;
    public int minCameraCover(TreeNode root) {
        if(minCameraCover_(root) == 1) camera++;
        return camera;
    }
    
    public int minCameraCover_(TreeNode root){
        if(root==null) return  -1;
        
        int lres = minCameraCover_(root.left);
        int rres = minCameraCover_(root.right);

        if(lres == 1 || rres == 1){
            camera++;
            return 0;
        }

        if(lres == 0 || rres == 0){
            return -1;
        }

        return 1;
    }
    
}

//https://practice.geeksforgeeks.org/problems/binary-tree-to-dll/1

Node prevDLL = null;
Node headDLL = null;

void bToDLL_(Node node){
    if(node==null) return;

    bToDLL_(node.left);
    
    if(prevDLL==null) headDLL = node;
    else{
        prevDLL.right = node;
        node.left = prevDLL;
    }

    prevDLL = node;

    bToDLL_(node.right);
}

Node bToDLL(Node root)
{
    bToDLL_(root);
    return headDLL;
}

// https://practice.geeksforgeeks.org/problems/binary-tree-to-cdll/1
public Node bTreeToClist(Node root){
    bToDLL_(root);

    prevDLL.right = headDLL;
    headDLL.left = prevDLL;
    
    return head;
}

//230
public TreeNode rightMostNode(TreeNode node,TreeNode curr){
    while(node.right != null && node.right != curr ){
        node = node.right;
    }
    return node;
}

public int kthSmallest(TreeNode node, int k) {
    TreeNode curr = node;
    while(curr!=null){
        TreeNode leftNode = curr.left;
        if(leftNode == null){  // left null
            if(--k == 0) break;
            curr = curr.right;
        }else{
            TreeNode rmost = rightMostNode(leftNode,curr);
            if(rmost.right == null){ // thread Creation
                rmost.right = curr;
                curr = curr.left;
            }else{  // thread Break
                rmost.right = null;
                if(--k == 0) break;
                
                curr = curr.right;
            }
        }
    }
    return curr.val;
}

// https://www.geeksforgeeks.org/check-if-given-preorder-inorder-and-postorder-traversals-are-of-same-tree/
int idx = 0;
public boolean checkTree(int[] preorder,int psi,int pei, int[] inorder,int isi,int iei,int[] post){
    if(psi > pei) return true;

    int idx = isi;
    boolean flag = false;
    while(idx < iei){
        if(inorder[idx] == preorder[psi]){
            flag = true;
            break;
        }
        idx++;
    }

    if(!flag) return false; 

    int count = idx - isi; // countOfNodesInLeftSubTree.

    if(!checkTree(preorder,psi+1,psi+count,inorder,isi,idx-1,post)) return  false;
    if(!checkTree(preorder,psi+count+1,pei,inorder,idx+1,iei,post)) return  false;
    
    if(preorder[psi] != post[idx++]) return false;
    
    return true;
}


public TreeNode checkTree(int[] preorder, int[] inorder,int[] post) {
    if(preorder.length==0) return null;
    int n = preorder.length;

    return checkTree(preorder,0,n-1,inorder,0,n-1,post);
}
public class file{
    public class TreeNode{
        int val = 0;
        TreeNode left = null;
        TreeNode right = null;

        TreeNode(int val){
            this.val = val;
        }
    }

    public static int size(TreeNode node){
        return node == null ? 0 : size(node.left) + size(node.right) + 1;
    }

    public static int hight(TreeNode node){
        return node == null ? 0 : Math.max(height(node.left), height(node.right)) + 1;
    }

    public static boolean find(TreeNode node,int data){
        if(node == null) return false;
        if(node.val == data) return true;

        return find(node.left,data) || find(node.right,data);
    }

    public boolean rootToNodePath(TreeNode node,int val,ArrayList<TreeNode> ans){
        if(node == null) return false;
        if(node.val == val){
            ans.add(node);
            return true;
        }

        boolean res = rootToNodePath(node.left, val, ans) 
                      || rootToNodePath(node.right, val, ans);
        if(res) ans.add(node);

        return res;
    }

    public TreeNode lowestCommonAncestor(TreeNode node, TreeNode p, TreeNode q) {
        ArrayList<TreeNode> list1 = new ArrayList<>(); 
        rootToNodePath(node,p.val,list1);
        
        ArrayList<TreeNode> list2 = new ArrayList<>(); 
        rootToNodePath(node,q.val,list2);

        int i = list1.size() - 1;
        int j = list2.size() - 1;

        TreeNode LCA = null;
        while(i >= 0 && j >= 0){
            if(list1.get(i).val != list2.get(j).val) break;

            LCA = list1.get(i);
            i--;
            j--;
        }

        return LCA;
    }

    public void printBelowAtK(TreeNode node,int k,TreeNode block,List<Integer> ans){
        if(node == null || node == block || k < 0) return;
        if(k == 0){
            ans.add(node.val);
            return;
        }

        printBelowAtK(node.left,k - 1, block, ans);
        printBelowAtK(node.right,k - 1, block, ans);
    }

    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        ArrayList<TreeNode> list = new ArrayList<>(); 
        rootToNodePath(root,target.val,list);    
        
        TreeNode block = null;
        List<Integer> ans = new ArrayList<>();
        for(int i = 0 ; i < list.size() ; i++){
            printBelowAtK(list.get(i),K - i, block, ans);
            block = list.get(i);
        }

        return ans;
    }

    // method 2
    public int distanceK(TreeNode node, TreeNode target, int K, List<Integer> ans) {
        if(node == null) return -1;
        if(node == target){
            printBelowAtK(node,K,null,ans);
            return 1;
        }

        int lRes = distanceK(node.left,target,K,ans);
        if(lRes != -1){
            printBelowAtK(node,K - lRes,node.left,ans);
            return lRes + 1;
        }

        int rRes = distanceK(node.right,target,K,ans);
        if(rRes != -1){
            printBelowAtK(node,K - rRes,node.right,ans);
            return rRes + 1;
        }

        return -1;
    }

    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        ArrayList<Integer> ans = new ArrayList<>(); 
        distanceK(root,target,K,ans);
        return ans;
    }

    // Burning Tree

    public void BurnTime(TreeNode node,int time,TreeNode block,List<List<Integer>> ans){
       if(node == null || node == block) return; 
       
       if(ans.size() == time) ans.add(new ArrayList<>());
       ans.get(time).add(node.val);

       BurnTime(node.left,time + 1, block, ans);
       BurnTime(node.right,time + 1, block, ans);
    
    }

    public List<Integer> BurningTree(TreeNode root, TreeNode target, int K) {
        ArrayList<TreeNode> list = new ArrayList<>(); 
        rootToNodePath(root,target.val,list);    
        
        TreeNode block = null;
        List<Integer> ans = new ArrayList<>();
        for(int i = 0 ; i < list.size() ; i++){
            BurnTime(list.get(i),i, block, ans);
            block = list.get(i);
        }

        return ans;
    }

    // -1 : need a camera, 0 : i have a camera, 1 : i'm covered.
    int camera = 0;
    public int minCameraCover_(TreeNode root) {
        if(root == null){
            return 1;
        }

        int lres = minCameraCover_(root.left);
        int rres = minCameraCover_(root.right);

        if(lres == -1 || rres == -1){
            camera++;
            return 0;
        }

        if(lres == 0 || rres == 0){
            return 1;
        }

        return -1;
    }

    public int minCameraCover(TreeNode root) {
        if(minCameraCover_(root) == -1) camera++;
        return camera;
    }

    //https://www.geeksforgeeks.org/find-maximum-path-sum-two-leaves-binary-tree/

    int llMaxSum = -(int)1e9;
    public int leafToLeafSum(Node node){
        if(node == null) return -(int)1e9;
        if(node.left == null && node.right == null) return node.data;

        int leftMaxSum = leafToLeafSum(node.left);
        int rightMaxSum = leafToLeafSum(node.right);

        if(node.left != null && node.right != null) 
            llMaxSum = Math.max(llMaxSum, 
                                leftMaxSum + node.data
                                 + rightMaxSum);
        return Math.max(leftMaxSum,rightMaxSum) + node.data;
    }

    //124
    public int maxPathSum(Node root)
    { 
        leafToLeafSum(root);
        return llMaxSum;
    }

    int nnMaxSum = -(int)1e9;
    public int maxPathSum_(TreeNode node) {
        if(node == null) return 0;
        int leftNodeMaxSum = maxPathSum_(node.left);
        int rightNodeMaxSum = maxPathSum_(node.right);
        
        int maxSum = Math.max(leftNodeMaxSum,rightNodeMaxSum) + node.val;
        
       nnMaxSum = Math.max(Math.max(nnMaxSum,node.val),Math.max(leftNodeMaxSum + node.val + rightNodeMaxSum, maxSum));
        
        return Math.max(maxSum, node.val);
    }
    
    public int maxPathSum(TreeNode root) {
        
        maxPathSum_(root);
        return nnMaxSum;
    }

    // View.=================================================

    public static void BFS(TreeNode node){

        LinkedList<TreeNode> que = new LinkedList<>(); // for que: addLast, removeFirst
        int level = 0;
        que.addLast(node);
        
        List<List<Integer>> ans = new ArrayList<>();

        while(que.size() != 0){
            int size = que.size();
            while(size-- > 0){
                TreeNode rnode = que.removeFirst();

                if(ans.size() == level) ans.add(new ArrayList<>());
                ans.get(level).add(rnode.val);

                if(rnode.left != null) que.addLast(rnode.left);
                if(rnode.right != null) que.addLast(rnode.right);
            }

            level++;
        }
    }

    public static List<Integer> LeftView(TreeNode node){
        LinkedList<TreeNode> que = new LinkedList<>(); // for que: addLast, removeFirst
        int level = 0;
        que.addLast(node);
        
        List<Integer> ans = new ArrayList<>();

        while(que.size() != 0){
            int size = que.size();
            ans.add(que.getFirst().val);

            while(size-- > 0){
                TreeNode rnode = que.removeFirst();

                if(rnode.left != null) que.addLast(rnode.left);
                if(rnode.right != null) que.addLast(rnode.right);
            }

            level++;
        }
    }

    
    public static List<Integer> rightView(TreeNode node){
        LinkedList<TreeNode> que = new LinkedList<>(); // for que: addLast, removeFirst
        int level = 0;
        que.addLast(node);
        
        List<Integer> ans = new ArrayList<>();

        while(que.size() != 0){
            int size = que.size();

            TreeNode prev = null;

            while(size-- > 0){
                TreeNode rnode = que.removeFirst();
                prev = rnode;

                if(rnode.left != null) que.addLast(rnode.left);
                if(rnode.right != null) que.addLast(rnode.right);
            }

            ans.add(prev);
            level++;
        }
    }

    public static class pair implements Comparable<pair>{
        TreeNode node = null;
        int level = 0;

        public pair(TreeNode node,int level){
            this.node = node;
            this.level = level;
        }

        public int compareTo(pair o){
            if(this.level == o.level) return this.node.val - o.node.val;
            else return this.level - o.level;
        } 
    }

    public static HashMap<Integer, ArrayList<Integer>> verticalOrder(TreeNode root){
        LinkedList<pair> que = new LinkedList<>(); // for que: addLast, removeFirst
        int level = 0;
        que.addLast(new pair(root, 0));
        
        HashMap<Integer, ArrayList<Integer>> ans = new HashMap<>();

        while(que.size() != 0){
            int size = que.size();
            while(size-- > 0){
                pair p = que.removeFirst();
                TreeNode node = p.node;
                int lev = p.level;

                ans.putIfAbsent(lev,new ArrayList<>());
                ans.get(lev).add(node.val);
                
                if(node.left != null) que.addLast(new pair(node.left,lev - 1));
                if(node.right != null) que.addLast(new pair(node.right,lev + 1));
            }
        }

        return ans;
    }

    public static void topBottomView(TreeNode node){
        HashMap<Integer, ArrayList<Integer>> map = verticalOrder(node);
        
        int minIdx = 0;
        int maxIdx = 0;
        
        for(int key : map.keySet()){
            minIdx = Math.min(minIdx,key);
            maxIdx = Math.max(maxIdx,key);    
        }

        // for verticl order 
        // List<List<Integer>> res = new ArrayList<>();
        // while(minIdx <= maxIdx){
        //     res.add(map.get(minIdx++));
        // }

        // Top View
        List<Integer> res = new ArrayList<>();
        while(minIdx <= maxIdx){
            res.add(map.get(minIdx++).get(0));
        }

        
        // Bottom View
        List<Integer> res = new ArrayList<>();
        while(minIdx <= maxIdx){
            int size = map.get(minIdx).size();
            res.add(map.get(minIdx++).get(size - 1));
        }
    }

    public static void verticalSum(TreeNode root){
        LinkedList<pair> que = new LinkedList<>(); // for que: addLast, removeFirst
        int level = 0;
        que.addLast(new pair(root, 0));
        
        HashMap<Integer, Integer> ans = new HashMap<>();

        while(que.size() != 0){
            int size = que.size();
            while(size-- > 0){
                pair p = que.removeFirst();
                TreeNode node = p.node;
                int lev = p.level;

                map.put(lev,map.getOrDefault(lev,0) + node.val);
                
                if(node.left != null) que.addLast(new pair(node.left,lev - 1));
                if(node.right != null) que.addLast(new pair(node.right,lev + 1));
            }
        }

        return ans;
    }

    public static void diagonalSum(TreeNode root){
        LinkedList<pair> que = new LinkedList<>(); // for que: addLast, removeFirst
        int level = 0;
        que.addLast(new pair(root, 0));
        
        HashMap<Integer, Integer> ans = new HashMap<>();

        while(que.size() != 0){
            int size = que.size();
            while(size-- > 0){
                pair p = que.removeFirst();
                TreeNode node = p.node;
                int lev = p.level;

                map.put(lev,map.getOrDefault(lev,0) + node.val);
                
                if(node.left != null) que.addLast(new pair(node.left,lev - 1));
                if(node.right != null) que.addLast(new pair(node.right,lev));
            }
        }

        return ans;
    }

   //987
   public static HashMap<Integer, ArrayList<Integer>> verticalOrder(TreeNode root){
    PriorityQueue<pair> que = new PriorityQueue<>(); // for que: addLast, removeFirst
    PriorityQueue<pair> cque = new PriorityQueue<>();
    int level = 0;
    que.add(new pair(root, 0));
    
    HashMap<Integer, ArrayList<Integer>> ans = new HashMap<>();

    while(que.size() != 0){
        int size = que.size();
        while(size-- > 0){
            pair p = que.remove();
            TreeNode node = p.node;
            int lev = p.level;

            ans.putIfAbsent(lev,new ArrayList<>());
            ans.get(lev).add(node.val);
            
            if(node.left != null) cque.add(new pair(node.left,lev - 1));
            if(node.right != null) cque.add(new pair(node.right,lev + 1));
        }
        
        
        PriorityQueue<pair> temp = que;
        que = cque;
        cque = temp;
    }

    return ans;
}

public List<List<Integer>> verticalTraversal(TreeNode node) {
    HashMap<Integer, ArrayList<Integer>> ans = verticalOrder(node);
    
    int minIdx = 0;
    int maxIdx = 0;
    
    for(int key : ans.keySet()){
        minIdx = Math.min(minIdx,key);
        maxIdx = Math.max(maxIdx,key);    
    }

    // for verticl order 
    List<List<Integer>> res = new ArrayList<>();
    while(minIdx <= maxIdx){
        res.add(ans.get(minIdx++));
    }

    return  res;
}


}
